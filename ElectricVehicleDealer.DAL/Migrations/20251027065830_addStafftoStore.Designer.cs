// <auto-generated />
using System;
using ElectricVehicleDealer.DAL.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ElectricVehicleDealer.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251027065830_addStafftoStore")]
    partial class addStafftoStore
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Agreement", b =>
                {
                    b.Property<int>("AgreementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("agreement_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AgreementId"));

                    b.Property<DateTime?>("AgreementDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("agreement_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<string>("FileUrl")
                        .HasColumnType("text")
                        .HasColumnName("file_url");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("TermsAndConditions")
                        .HasColumnType("text")
                        .HasColumnName("terms_and_conditions");

                    b.HasKey("AgreementId")
                        .HasName("agreement_pkey");

                    b.HasIndex("CustomerId");

                    b.ToTable("agreement", (string)null);
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("brand_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BrandId"));

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("brand_name");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<int?>("FounderYear")
                        .HasColumnType("integer")
                        .HasColumnName("founder_year");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("website");

                    b.HasKey("BrandId")
                        .HasName("brand_pkey");

                    b.ToTable("brand", (string)null);
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("LicenseDown")
                        .HasColumnType("text")
                        .HasColumnName("license_down");

                    b.Property<string>("LicenseUp")
                        .HasColumnType("text")
                        .HasColumnName("license_up");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.HasKey("CustomerId")
                        .HasName("customer_pkey");

                    b.HasIndex(new[] { "Email" }, "customer_email_key")
                        .IsUnique();

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Dealer", b =>
                {
                    b.Property<int>("DealerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("dealer_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DealerId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<int?>("StoreId")
                        .HasColumnType("integer")
                        .HasColumnName("store_id");

                    b.HasKey("DealerId")
                        .HasName("dealer_pkey");

                    b.HasIndex("StoreId");

                    b.HasIndex(new[] { "Email" }, "dealer_email_key")
                        .IsUnique();

                    b.ToTable("dealer", (string)null);
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("feedback_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FeedbackId"));

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.HasKey("FeedbackId")
                        .HasName("feedback_pkey");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("VehicleId");

                    b.ToTable("feedback", (string)null);
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("OrderId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<int>("DealerId")
                        .HasColumnType("integer")
                        .HasColumnName("dealer_id");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<DateTime?>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("order_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalPrice")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("total_price");

                    b.HasKey("OrderId")
                        .HasName("orders_pkey");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DealerId");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("payment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal?>("Amount")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("amount");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<string>("Method")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("method");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("payment_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("PaymentId")
                        .HasName("payment_pkey");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.ToTable("payment", (string)null);
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("promotion_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PromotionId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal?>("DiscountPercent")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)")
                        .HasColumnName("discount_percent");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("PromotionId")
                        .HasName("promotion_pkey");

                    b.ToTable("promotion", (string)null);
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Quote", b =>
                {
                    b.Property<int>("QuoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("quote_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuoteId"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<int>("DealerId")
                        .HasColumnType("integer")
                        .HasColumnName("dealer_id");

                    b.Property<DateTime?>("QuoteDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("quote_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.HasKey("QuoteId")
                        .HasName("quote_pkey");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DealerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("quote", (string)null);
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("staff_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StaffId"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("integer")
                        .HasColumnName("brand_id");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("position");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int?>("StoreId")
                        .HasColumnType("integer");

                    b.HasKey("StaffId")
                        .HasName("staff_pkey");

                    b.HasIndex("BrandId");

                    b.HasIndex("StoreId");

                    b.HasIndex(new[] { "Email" }, "staff_email_key")
                        .IsUnique();

                    b.ToTable("staff", (string)null);
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Storage", b =>
                {
                    b.Property<int>("StorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("storage_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StorageId"));

                    b.Property<int>("BrandId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("QuantityAvailable")
                        .HasColumnType("integer")
                        .HasColumnName("quantity_available");

                    b.Property<int>("StoreId")
                        .HasColumnType("integer")
                        .HasColumnName("store_id");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.HasKey("StorageId")
                        .HasName("storage_pkey");

                    b.HasIndex("StoreId");

                    b.HasIndex("VehicleId");

                    b.ToTable("storage", (string)null);
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("store_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StoreId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<int?>("PromotionId")
                        .HasColumnType("integer")
                        .HasColumnName("promotion_id");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("store_name");

                    b.HasKey("StoreId")
                        .HasName("store_pkey");

                    b.HasIndex(new[] { "Email" }, "store_email_key")
                        .IsUnique();

                    b.ToTable("store", (string)null);
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.TestAppointment", b =>
                {
                    b.Property<int>("TestAppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("test_appointment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TestAppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("appointment_date");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<int>("DealerId")
                        .HasColumnType("integer")
                        .HasColumnName("dealer_id");

                    b.Property<int>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("VehicleId")
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    b.HasKey("TestAppointmentId")
                        .HasName("test_appointment_pkey");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DealerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("test_appointment", (string)null);
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("vehicle_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("AirConditioning")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("air_conditioning");

                    b.Property<int?>("Airbags")
                        .HasColumnType("integer")
                        .HasColumnName("airbags");

                    b.Property<string>("BatteryCapacity")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("battery_capacity");

                    b.Property<int>("BrandId")
                        .HasColumnType("integer")
                        .HasColumnName("brand_id");

                    b.Property<string>("Cameras")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("cameras");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("DailyDrivingLimit")
                        .HasColumnType("integer")
                        .HasColumnName("daily_driving_limit");

                    b.Property<int?>("DoorCount")
                        .HasColumnType("integer")
                        .HasColumnName("door_count");

                    b.Property<string>("FrameChassis")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("frame_chassis");

                    b.Property<string>("GlassWindows")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("glass_windows");

                    b.Property<string>("Headlights")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("headlights");

                    b.Property<int?>("HeightMm")
                        .HasColumnType("integer")
                        .HasColumnName("height_mm");

                    b.Property<int?>("Horsepower")
                        .HasColumnType("integer")
                        .HasColumnName("horsepower");

                    b.Property<string[]>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("image_urls");

                    b.Property<string>("InVehicleCabinet")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("in_vehicle_cabinet");

                    b.Property<string>("InteriorMaterial")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("interior_material");

                    b.Property<bool>("IsAllocation")
                        .HasColumnType("boolean")
                        .HasColumnName("is_allocation");

                    b.Property<int?>("LengthMm")
                        .HasColumnType("integer")
                        .HasColumnName("length_mm");

                    b.Property<string>("Mirrors")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("mirrors");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("model_name");

                    b.Property<decimal?>("Price")
                        .HasPrecision(15, 2)
                        .HasColumnType("numeric(15,2)")
                        .HasColumnName("price");

                    b.Property<string>("RangePerCharge")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("range_per_charge");

                    b.Property<string>("Screen")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("screen");

                    b.Property<string>("SeatMaterial")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("seat_material");

                    b.Property<int?>("SeatingCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("seating_capacity");

                    b.Property<string>("SpeakerSystem")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("speaker_system");

                    b.Property<string>("Taillights")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("taillights");

                    b.Property<string>("Transmission")
                        .HasColumnType("text")
                        .HasColumnName("transmission");

                    b.Property<int?>("TrunkCapacity")
                        .HasColumnType("integer")
                        .HasColumnName("trunk_capacity");

                    b.Property<string>("VehicleType")
                        .HasColumnType("text")
                        .HasColumnName("vehicle_type");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("version");

                    b.Property<string>("WarrantyPeriod")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("warranty_period");

                    b.Property<string>("Wheels")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("wheels");

                    b.Property<int?>("WidthMm")
                        .HasColumnType("integer")
                        .HasColumnName("width_mm");

                    b.Property<int?>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("VehicleId")
                        .HasName("vehicle_pkey");

                    b.HasIndex("BrandId");

                    b.ToTable("vehicle", (string)null);
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Agreement", b =>
                {
                    b.HasOne("ElectricVehicleDealer.DAL.Entities.Customer", "Customer")
                        .WithMany("Agreements")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("agreement_customer_id_fkey");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Dealer", b =>
                {
                    b.HasOne("ElectricVehicleDealer.DAL.Entities.Store", "Store")
                        .WithMany("Dealers")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("dealer_store_id_fkey");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Feedback", b =>
                {
                    b.HasOne("ElectricVehicleDealer.DAL.Entities.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("feedback_customer_id_fkey");

                    b.HasOne("ElectricVehicleDealer.DAL.Entities.Order", "Order")
                        .WithMany("Feedbacks")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("feedback_order_id_fkey");

                    b.HasOne("ElectricVehicleDealer.DAL.Entities.Vehicle", "Vehicle")
                        .WithMany("Feedbacks")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("feedback_vehicle_id_fkey");

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Order", b =>
                {
                    b.HasOne("ElectricVehicleDealer.DAL.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("orders_customer_id_fkey");

                    b.HasOne("ElectricVehicleDealer.DAL.Entities.Dealer", "Dealer")
                        .WithMany("Orders")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("orders_dealer_id_fkey");

                    b.Navigation("Customer");

                    b.Navigation("Dealer");
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Payment", b =>
                {
                    b.HasOne("ElectricVehicleDealer.DAL.Entities.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("payment_customer_id_fkey");

                    b.HasOne("ElectricVehicleDealer.DAL.Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("payment_order_id_fkey");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Quote", b =>
                {
                    b.HasOne("ElectricVehicleDealer.DAL.Entities.Customer", "Customer")
                        .WithMany("Quotes")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("quote_customer_id_fkey");

                    b.HasOne("ElectricVehicleDealer.DAL.Entities.Dealer", "Dealer")
                        .WithMany("Quotes")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("quote_dealer_id_fkey");

                    b.HasOne("ElectricVehicleDealer.DAL.Entities.Vehicle", "Vehicle")
                        .WithMany("Quotes")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("quote_vehicle_id_fkey");

                    b.Navigation("Customer");

                    b.Navigation("Dealer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Staff", b =>
                {
                    b.HasOne("ElectricVehicleDealer.DAL.Entities.Brand", "Brand")
                        .WithMany("Staffs")
                        .HasForeignKey("BrandId");

                    b.HasOne("ElectricVehicleDealer.DAL.Entities.Store", null)
                        .WithMany("Staff")
                        .HasForeignKey("StoreId");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Storage", b =>
                {
                    b.HasOne("ElectricVehicleDealer.DAL.Entities.Store", "Store")
                        .WithMany("Storages")
                        .HasForeignKey("StoreId")
                        .IsRequired()
                        .HasConstraintName("storage_store_id_fkey");

                    b.HasOne("ElectricVehicleDealer.DAL.Entities.Vehicle", "Vehicle")
                        .WithMany("Storages")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("storage_vehicle_id_fkey");

                    b.Navigation("Store");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.TestAppointment", b =>
                {
                    b.HasOne("ElectricVehicleDealer.DAL.Entities.Customer", "Customer")
                        .WithMany("TestAppointments")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("test_appointment_customer_id_fkey");

                    b.HasOne("ElectricVehicleDealer.DAL.Entities.Dealer", "Dealer")
                        .WithMany("TestAppointments")
                        .HasForeignKey("DealerId")
                        .IsRequired()
                        .HasConstraintName("test_appointment_dealer_id_fkey");

                    b.HasOne("ElectricVehicleDealer.DAL.Entities.Vehicle", "Vehicle")
                        .WithMany("TestAppointments")
                        .HasForeignKey("VehicleId")
                        .IsRequired()
                        .HasConstraintName("test_appointment_vehicle_id_fkey");

                    b.Navigation("Customer");

                    b.Navigation("Dealer");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Vehicle", b =>
                {
                    b.HasOne("ElectricVehicleDealer.DAL.Entities.Brand", "Brand")
                        .WithMany("Vehicles")
                        .HasForeignKey("BrandId")
                        .IsRequired()
                        .HasConstraintName("vehicle_brand_id_fkey");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Brand", b =>
                {
                    b.Navigation("Staffs");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Customer", b =>
                {
                    b.Navigation("Agreements");

                    b.Navigation("Feedbacks");

                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("Quotes");

                    b.Navigation("TestAppointments");
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Dealer", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Quotes");

                    b.Navigation("TestAppointments");
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Order", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Store", b =>
                {
                    b.Navigation("Dealers");

                    b.Navigation("Staff");

                    b.Navigation("Storages");
                });

            modelBuilder.Entity("ElectricVehicleDealer.DAL.Entities.Vehicle", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Quotes");

                    b.Navigation("Storages");

                    b.Navigation("TestAppointments");
                });
#pragma warning restore 612, 618
        }
    }
}
